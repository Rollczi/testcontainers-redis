plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'io.freefair.lombok' version '6.0.0-m2'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'net.researchgate.release' version '2.8.1'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'com.github.breadmoirai.github-release' version '2.2.12'
}

group = 'com.redislabs'
description = 'Testcontainers Redis'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation group: 'org.testcontainers', name: 'testcontainers', version: testcontainers_version
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.2'
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: testcontainers_version
    testImplementation 'org.slf4j:slf4j-simple:1.7.30'
    testImplementation 'com.redislabs:mesclun:1.3.3-SNAPSHOT'
}

shadowJar {
    archiveClassifier.set('')
    dependencies {
        exclude(dependency('com.fasterxml.jackson.core:jackson-annotations'))
        exclude(dependency('com.github.docker-java:docker-java-api'))
        exclude(dependency('com.github.docker-java:docker-java-transport'))
        exclude(dependency('com.github.docker-java:docker-java-transport-zerodep'))
        exclude(dependency('junit:junit'))
        exclude(dependency('net.java.dev.jna:jna'))
        exclude(dependency('org.apache.commons:commons-compress'))
        exclude(dependency('org.hamcrest:hamcrest-core'))
        exclude(dependency('org.rnorth.duct-tape:duct-tape'))
        exclude(dependency('org.slf4j:slf4j-api'))
    }
}

test {
    useJUnitPlatform()
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
//        mavenJava(MavenPublication) {
//            from(components.java)
//            versionMapping {
//                usage('java-api') {
//                    fromResolutionOf('runtimeClasspath')
//                }
//                usage('java-runtime') {
//                    fromResolutionResult()
//                }
//            }
//            pom {
//                name = 'Testcontainers Redis'
//                description = 'Redis modules for Testcontainers'
//                url = 'https://github.com/redis-developer/testcontainers-redis'
//                licenses {
//                    license {
//                        name = 'The Apache License, Version 2.0'
//                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
//                    }
//                }
//                developers {
//                    developer {
//                        id = 'jruaux'
//                        name = 'Julien Ruaux'
//                    }
//                }
//                scm {
//                    connection = 'scm:git:git://github.com/redis-developer/testcontainers-redis'
//                    developerConnection = 'scm:git:git@github.com:redis-developer/testcontainers-redis'
//                    url = 'https://github.com/redis-developer/testcontainers-redis'
//                }
//            }
//        }
    }
}

signing {
    sign publishing.publications.shadow
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

githubRelease {
    token = project.hasProperty('githubToken') ? project.property('githubToken') : ''
    owner "redis-developer"
    repo "testcontainers-redis"
    body changelog()
    tagName "${project.version}"
}

def isNonStable = { String version ->
    def nonStableKeyword = ['PREVIEW'].any { it -> version.toUpperCase().contains(it) }
    def stableKeyword = ['RELEASE', 'FINAL', 'GA', 'JRE8'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+([.-]r)?$/
    return nonStableKeyword || (!stableKeyword && !(version ==~ regex))
}

tasks.named("dependencyUpdates").configure {

    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }

}

release {
    buildTasks = ['clean', 'build', 'publishToSonatype', 'closeAndReleaseSonatypeStagingRepository', 'githubRelease', 'publishToMavenLocal']
}
